// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: barista.proto

package barista

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BaristaService_StartPreparing_FullMethodName   = "/barista.BaristaService/StartPreparing"
	BaristaService_OrderReady_FullMethodName       = "/barista.BaristaService/OrderReady"
	BaristaService_GetPendingOrders_FullMethodName = "/barista.BaristaService/GetPendingOrders"
)

// BaristaServiceClient is the client API for BaristaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BaristaServiceClient interface {
	StartPreparing(ctx context.Context, in *StartPreparingRequest, opts ...grpc.CallOption) (*StartPreparingResponse, error)
	OrderReady(ctx context.Context, in *OrderReadyRequest, opts ...grpc.CallOption) (*OrderReadyResponse, error)
	GetPendingOrders(ctx context.Context, in *GetPendingOrdersRequest, opts ...grpc.CallOption) (*GetPendingOrdersResponse, error)
}

type baristaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBaristaServiceClient(cc grpc.ClientConnInterface) BaristaServiceClient {
	return &baristaServiceClient{cc}
}

func (c *baristaServiceClient) StartPreparing(ctx context.Context, in *StartPreparingRequest, opts ...grpc.CallOption) (*StartPreparingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartPreparingResponse)
	err := c.cc.Invoke(ctx, BaristaService_StartPreparing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baristaServiceClient) OrderReady(ctx context.Context, in *OrderReadyRequest, opts ...grpc.CallOption) (*OrderReadyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderReadyResponse)
	err := c.cc.Invoke(ctx, BaristaService_OrderReady_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baristaServiceClient) GetPendingOrders(ctx context.Context, in *GetPendingOrdersRequest, opts ...grpc.CallOption) (*GetPendingOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPendingOrdersResponse)
	err := c.cc.Invoke(ctx, BaristaService_GetPendingOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BaristaServiceServer is the server API for BaristaService service.
// All implementations must embed UnimplementedBaristaServiceServer
// for forward compatibility.
type BaristaServiceServer interface {
	StartPreparing(context.Context, *StartPreparingRequest) (*StartPreparingResponse, error)
	OrderReady(context.Context, *OrderReadyRequest) (*OrderReadyResponse, error)
	GetPendingOrders(context.Context, *GetPendingOrdersRequest) (*GetPendingOrdersResponse, error)
	mustEmbedUnimplementedBaristaServiceServer()
}

// UnimplementedBaristaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBaristaServiceServer struct{}

func (UnimplementedBaristaServiceServer) StartPreparing(context.Context, *StartPreparingRequest) (*StartPreparingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartPreparing not implemented")
}
func (UnimplementedBaristaServiceServer) OrderReady(context.Context, *OrderReadyRequest) (*OrderReadyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderReady not implemented")
}
func (UnimplementedBaristaServiceServer) GetPendingOrders(context.Context, *GetPendingOrdersRequest) (*GetPendingOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingOrders not implemented")
}
func (UnimplementedBaristaServiceServer) mustEmbedUnimplementedBaristaServiceServer() {}
func (UnimplementedBaristaServiceServer) testEmbeddedByValue()                        {}

// UnsafeBaristaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BaristaServiceServer will
// result in compilation errors.
type UnsafeBaristaServiceServer interface {
	mustEmbedUnimplementedBaristaServiceServer()
}

func RegisterBaristaServiceServer(s grpc.ServiceRegistrar, srv BaristaServiceServer) {
	// If the following call pancis, it indicates UnimplementedBaristaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BaristaService_ServiceDesc, srv)
}

func _BaristaService_StartPreparing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartPreparingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaristaServiceServer).StartPreparing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaristaService_StartPreparing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaristaServiceServer).StartPreparing(ctx, req.(*StartPreparingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaristaService_OrderReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderReadyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaristaServiceServer).OrderReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaristaService_OrderReady_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaristaServiceServer).OrderReady(ctx, req.(*OrderReadyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaristaService_GetPendingOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPendingOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaristaServiceServer).GetPendingOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaristaService_GetPendingOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaristaServiceServer).GetPendingOrders(ctx, req.(*GetPendingOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BaristaService_ServiceDesc is the grpc.ServiceDesc for BaristaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BaristaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "barista.BaristaService",
	HandlerType: (*BaristaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartPreparing",
			Handler:    _BaristaService_StartPreparing_Handler,
		},
		{
			MethodName: "OrderReady",
			Handler:    _BaristaService_OrderReady_Handler,
		},
		{
			MethodName: "GetPendingOrders",
			Handler:    _BaristaService_GetPendingOrders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "barista.proto",
}
